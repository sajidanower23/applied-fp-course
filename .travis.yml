# This Travis job script has been generated by a script via
#
#   runghc make_travis_yml_2.hs 'cabal.project'
#
# For more information, see https://github.com/hvr/multi-ghc-travis
#
language: c
sudo: false

git:
  submodules: false  # whether to recursively clone submodules

cache:
  directories:
    - $HOME/.cabal/packages
    - $HOME/.cabal/store

before_cache:
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/build-reports.log
  # remove files that are regenerated by 'cabal update'
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/00-index.*
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/*.json
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/01-index.cache
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/01-index.tar
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/01-index.tar.idx

  - rm -rfv $HOME/.cabal/packages/head.hackage

matrix:
  include:
    - compiler: "ghc-7.10.3"
    # env: TEST=--disable-tests BENCH=--disable-benchmarks
      addons: {apt: {packages: [ghc-ppa-tools,cabal-install-head,ghc-7.10.3], sources: [hvr-ghc]}}
    - compiler: "ghc-8.0.2"
    # env: TEST=--disable-tests BENCH=--disable-benchmarks
      addons: {apt: {packages: [ghc-ppa-tools,cabal-install-head,ghc-8.0.2], sources: [hvr-ghc]}}
    - compiler: "ghc-8.2.2"
    # env: TEST=--disable-tests BENCH=--disable-benchmarks
      addons: {apt: {packages: [ghc-ppa-tools,cabal-install-head,ghc-8.2.2], sources: [hvr-ghc]}}

before_install:
  - HC=${CC}
  - HCPKG=${HC/ghc/ghc-pkg}
  - unset CC
  - ROOTDIR=$(pwd)
  - mkdir -p $HOME/.local/bin
  - "PATH=/opt/ghc/bin:/opt/ghc-ppa-tools/bin:$HOME/local/bin:$PATH"
  - HCNUMVER=$(( $(${HC} --numeric-version|sed -E 's/([0-9]+)\.([0-9]+)\.([0-9]+).*/\1 * 10000 + \2 * 100 + \3/') ))
  - echo $HCNUMVER

install:
  - cabal --version
  - echo "$(${HC} --version) [$(${HC} --print-project-git-commit-id 2> /dev/null || echo '?')]"
  - BENCH=${BENCH---enable-benchmarks}
  - TEST=${TEST---enable-tests}
  - HADDOCK=${HADDOCK-true}
  - INSTALLED=${INSTALLED-true}
  - GHCHEAD=${GHCHEAD-false}
  - travis_retry cabal update -v
  - "sed -i.bak 's/^jobs:/-- jobs:/' ${HOME}/.cabal/config"
  - rm -fv cabal.project cabal.project.local
  - grep -Ev -- '^\s*--' ${HOME}/.cabal/config | grep -Ev '^\s*$'
  - "printf 'packages: \"level01\" \"level02\" \"level03\" \"level04\" \"level05\" \"level06\" \"level07\"\\n' > cabal.project"
  - cat cabal.project
  - if [ -f "level01/configure.ac" ]; then
      (cd "level01" && autoreconf -i);
    fi
  - if [ -f "level02/configure.ac" ]; then
      (cd "level02" && autoreconf -i);
    fi
  - if [ -f "level03/configure.ac" ]; then
      (cd "level03" && autoreconf -i);
    fi
  - if [ -f "level04/configure.ac" ]; then
      (cd "level04" && autoreconf -i);
    fi
  - if [ -f "level05/configure.ac" ]; then
      (cd "level05" && autoreconf -i);
    fi
  - if [ -f "level06/configure.ac" ]; then
      (cd "level06" && autoreconf -i);
    fi
  - if [ -f "level07/configure.ac" ]; then
      (cd "level07" && autoreconf -i);
    fi
  - rm -f cabal.project.freeze
  - cabal new-build -w ${HC} ${TEST} ${BENCH} --project-file="cabal.project" --dep -j2 all
  - cabal new-build -w ${HC} --disable-tests --disable-benchmarks --project-file="cabal.project" --dep -j2 all
  - rm -rf "level01"/.ghc.environment.* "level02"/.ghc.environment.* "level03"/.ghc.environment.* "level04"/.ghc.environment.* "level05"/.ghc.environment.* "level06"/.ghc.environment.* "level07"/.ghc.environment.* "level01"/dist "level02"/dist "level03"/dist "level04"/dist "level05"/dist "level06"/dist "level07"/dist
  - DISTDIR=$(mktemp -d /tmp/dist-test.XXXX)

# Here starts the actual work to be performed for the package under test;
# any command which exits with a non-zero exit code causes the build to fail.
script:
  # test that source-distributions can be generated
  # - (cd "level01" && cabal sdist)
  # - (cd "level02" && cabal sdist)
  # - (cd "level03" && cabal sdist)
  # - (cd "level04" && cabal sdist)
  # - (cd "level05" && cabal sdist)
  # - (cd "level06" && cabal sdist)
  # - (cd "level07" && cabal sdist)
  # - mv "level01"/dist/level01-*.tar.gz "level02"/dist/level02-*.tar.gz "level03"/dist/level03-*.tar.gz "level04"/dist/level04-*.tar.gz "level05"/dist/level05-*.tar.gz "level06"/dist/level06-*.tar.gz "level07"/dist/level07-*.tar.gz ${DISTDIR}/
  # - cd ${DISTDIR} || false
  # - find . -maxdepth 1 -name '*.tar.gz' -exec tar -xvf '{}' \;
  - "printf 'packages: level01/level01.cabal level02/level02.cabal level03/level03.cabal level04/level04.cabal level05/level05.cabal level06/level06.cabal level07/level07.cabal\\n' > cabal.project"
  - cat cabal.project
  # this builds all libraries and executables (without tests/benchmarks)
  - cabal new-build -w ${HC} --disable-tests --disable-benchmarks all

  # Build with installed constraints for packages in global-db
  - if $INSTALLED; then echo cabal new-build -w ${HC} --disable-tests --disable-benchmarks $(${HCPKG} list --global --simple-output --names-only | sed 's/\([a-zA-Z0-9-]\{1,\}\) */--constraint="\1 installed" /g') all | sh; else echo "Not building with installed constraints"; fi

  # build & run tests, build benchmarks
  - cabal new-build -w ${HC} ${TEST} ${BENCH} all
  # - if [ "x$TEST" = "x--enable-tests" ]; then cabal new-test -w ${HC} ${TEST} ${BENCH} all; fi

  # cabal check
  # - (cd level01 && cabal check)
  # - (cd level02 && cabal check)
  # - (cd level03 && cabal check)
  # - (cd level04 && cabal check)
  # - (cd level05 && cabal check)
  # - (cd level06 && cabal check)
  # - (cd level07 && cabal check)

  # haddock
  - rm -rf ./dist-newstyle
  - if $HADDOCK; then cabal new-haddock -w ${HC} ${TEST} ${BENCH} all; else echo "Skipping haddock generation";fi

# REGENDATA ["cabal.project"]
# EOF
